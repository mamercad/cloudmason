---
- name: k3s
  hosts:
    - nodes
    - clusterpis
  gather_facts: yes
  become: no

  vars:
    kubernetes:
      context: sunfire
      metallb:
        dhcp:
          start: 192.168.1.170
          end: 192.168.1.199
        memberlist: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          38636462356664393833313066353934393630653938356563633436333461373134313631373361
          6365376165623461333939383837373032626133383639340a313538366635356163373632643464
          64356435363161343032643561356336633437323836363332333639363637653436666638323135
          3862363630663339380a386236396164386234313963613065396361373437303633313037363362
          31666533633763363166316463613462643737313738636134313966353865316239623164303564
          62313362366335313336376465633538363433353463366537333232633832663064333563386363
          31323539623162646561343130653536306637626466613231356562333936656366643931323431
          39316532396364643164

  roles:

    - role: xanmanning.k3s

  pre_tasks:

    - name: Set each node to be a control node
      ansible.builtin.set_fact:
        k3s_control_node: true
        k3s_control_node_address: node0
        k3s_primary_control_node: true
        k3s_etcd_datastore: true
        k3s_release_version: v1.20.0+k3s2
        k3s_become_for_all: yes
      when: inventory_hostname in ['node0']

    - name: Set each node to be a control node
      ansible.builtin.set_fact:
        k3s_control_node: true
        k3s_control_node_address: node0
        k3s_primary_control_node: false
        k3s_etcd_datastore: true
        k3s_release_version: v1.20.0+k3s2
        k3s_become_for_all: yes
      when: inventory_hostname in ['node1', 'node2']

    - name: Set each node to be a control node
      ansible.builtin.set_fact:
        k3s_control_node: false
        k3s_control_node_address: node0
        k3s_release_version: v1.20.0+k3s2
        k3s_become_for_all: yes
      when: inventory_hostname in ['node3', 'node4', 'node5']

    - name: Set each node to be a control node
      ansible.builtin.set_fact:
        k3s_control_node: false
        k3s_control_node_address: node0
        k3s_release_version: v1.20.0+k3s2
        k3s_become_for_all: yes
      when: inventory_hostname in ['clusterpi0', 'clusterpi1', 'clusterpi2', 'clusterpi3', 'clusterpi4']

  tasks:

    - block:

      - name: Create metallb-system Namespace
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: metallb-system
              labels:
                app: metallb

      - name: Create metallb PodSecurityPolicy (controller)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: policy/v1beta1
            kind: PodSecurityPolicy
            metadata:
              labels:
                app: metallb
              name: controller
              namespace: metallb-system
            spec:
              allowPrivilegeEscalation: false
              allowedCapabilities: []
              allowedHostPaths: []
              defaultAddCapabilities: []
              defaultAllowPrivilegeEscalation: false
              fsGroup:
                ranges:
                - max: 65535
                  min: 1
                rule: MustRunAs
              hostIPC: false
              hostNetwork: false
              hostPID: false
              privileged: false
              readOnlyRootFilesystem: true
              requiredDropCapabilities:
              - ALL
              runAsUser:
                ranges:
                - max: 65535
                  min: 1
                rule: MustRunAs
              seLinux:
                rule: RunAsAny
              supplementalGroups:
                ranges:
                - max: 65535
                  min: 1
                rule: MustRunAs
              volumes:
              - configMap
              - secret
              - emptyDir

      - name: Create metallb PodSecurityPolicy (speaker)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: policy/v1beta1
            kind: PodSecurityPolicy
            metadata:
              labels:
                app: metallb
              name: speaker
              namespace: metallb-system
            spec:
              allowPrivilegeEscalation: false
              allowedCapabilities:
              - NET_ADMIN
              - NET_RAW
              - SYS_ADMIN
              allowedHostPaths: []
              defaultAddCapabilities: []
              defaultAllowPrivilegeEscalation: false
              fsGroup:
                rule: RunAsAny
              hostIPC: false
              hostNetwork: true
              hostPID: false
              hostPorts:
              - max: 7472
                min: 7472
              privileged: true
              readOnlyRootFilesystem: true
              requiredDropCapabilities:
              - ALL
              runAsUser:
                rule: RunAsAny
              seLinux:
                rule: RunAsAny
              supplementalGroups:
                rule: RunAsAny
              volumes:
              - configMap
              - secret
              - emptyDir

      - name: Create metallb ServiceAccount (controller)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              labels:
                app: metallb
              name: controller
              namespace: metallb-system

      - name: Create metallb ServiceAccount (speaker)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              labels:
                app: metallb
              name: speaker
              namespace: metallb-system

      - name: Create metallb ClusterRole (controller)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                app: metallb
              name: metallb-system:controller
            rules:
            - apiGroups:
              - ''
              resources:
              - services
              verbs:
              - get
              - list
              - watch
              - update
            - apiGroups:
              - ''
              resources:
              - services/status
              verbs:
              - update
            - apiGroups:
              - ''
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - policy
              resourceNames:
              - controller
              resources:
              - podsecuritypolicies
              verbs:
              - use

      - name: Create metallb ClusterRole (speaker)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              labels:
                app: metallb
              name: metallb-system:speaker
            rules:
            - apiGroups:
              - ''
              resources:
              - services
              - endpoints
              - nodes
              verbs:
              - get
              - list
              - watch
            - apiGroups:
              - ''
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - policy
              resourceNames:
              - speaker
              resources:
              - podsecuritypolicies
              verbs:
              - use

      - name: Create metallb Role (config-watcher)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              labels:
                app: metallb
              name: config-watcher
              namespace: metallb-system
            rules:
            - apiGroups:
              - ''
              resources:
              - configmaps
              verbs:
              - get
              - list
              - watch

      - name: Create metallb Role (pod-listener)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              labels:
                app: metallb
              name: pod-lister
              namespace: metallb-system
            rules:
            - apiGroups:
              - ''
              resources:
              - pods
              verbs:
              - list

      - name: Create metallb ClusterRoleBinding (controller)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              labels:
                app: metallb
              name: metallb-system:controller
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: metallb-system:controller
            subjects:
            - kind: ServiceAccount
              name: controller
              namespace: metallb-system

      - name: Create metallb ClusterRoleBinding (speaker)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              labels:
                app: metallb
              name: metallb-system:speaker
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: metallb-system:speaker
            subjects:
            - kind: ServiceAccount
              name: speaker
              namespace: metallb-system

      - name: Create metallb RoleBinding (config-watcher)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              labels:
                app: metallb
              name: config-watcher
              namespace: metallb-system
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: config-watcher
            subjects:
            - kind: ServiceAccount
              name: controller
            - kind: ServiceAccount
              name: speaker

      - name: Create metallb RoleBinding (pod-listener)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              labels:
                app: metallb
              name: pod-lister
              namespace: metallb-system
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: pod-lister
            subjects:
            - kind: ServiceAccount
              name: speaker

      - name: Create metallb DaemonSet
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: apps/v1
            kind: DaemonSet
            metadata:
              labels:
                app: metallb
                component: speaker
              name: speaker
              namespace: metallb-system
            spec:
              selector:
                matchLabels:
                  app: metallb
                  component: speaker
              template:
                metadata:
                  annotations:
                    prometheus.io/port: '7472'
                    prometheus.io/scrape: 'true'
                  labels:
                    app: metallb
                    component: speaker
                spec:
                  containers:
                  - args:
                    - --port=7472
                    - --config=config
                    env:
                    - name: METALLB_NODE_NAME
                      valueFrom:
                        fieldRef:
                          fieldPath: spec.nodeName
                    - name: METALLB_HOST
                      valueFrom:
                        fieldRef:
                          fieldPath: status.hostIP
                    - name: METALLB_ML_BIND_ADDR
                      valueFrom:
                        fieldRef:
                          fieldPath: status.podIP
                    # needed when another software is also using memberlist / port 7946
                    #- name: METALLB_ML_BIND_PORT
                    #  value: "7946"
                    - name: METALLB_ML_LABELS
                      value: "app=metallb,component=speaker"
                    - name: METALLB_ML_NAMESPACE
                      valueFrom:
                        fieldRef:
                          fieldPath: metadata.namespace
                    - name: METALLB_ML_SECRET_KEY
                      valueFrom:
                        secretKeyRef:
                          name: memberlist
                          key: secretkey
                    image: metallb/speaker:v0.9.5
                    imagePullPolicy: Always
                    name: speaker
                    ports:
                    - containerPort: 7472
                      name: monitoring
                    resources:
                      limits:
                        cpu: 100m
                        memory: 100Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        add:
                        - NET_ADMIN
                        - NET_RAW
                        - SYS_ADMIN
                        drop:
                        - ALL
                      readOnlyRootFilesystem: true
                  hostNetwork: true
                  nodeSelector:
                    kubernetes.io/os: linux
                  serviceAccountName: speaker
                  terminationGracePeriodSeconds: 2
                  tolerations:
                  - effect: NoSchedule
                    key: node-role.kubernetes.io/master

      - name: Create metallb Deployment
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                app: metallb
                component: controller
              name: controller
              namespace: metallb-system
            spec:
              revisionHistoryLimit: 3
              selector:
                matchLabels:
                  app: metallb
                  component: controller
              template:
                metadata:
                  annotations:
                    prometheus.io/port: '7472'
                    prometheus.io/scrape: 'true'
                  labels:
                    app: metallb
                    component: controller
                spec:
                  containers:
                  - args:
                    - --port=7472
                    - --config=config
                    image: metallb/controller:v0.9.5
                    imagePullPolicy: Always
                    name: controller
                    ports:
                    - containerPort: 7472
                      name: monitoring
                    resources:
                      limits:
                        cpu: 100m
                        memory: 100Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                        - all
                      readOnlyRootFilesystem: true
                  nodeSelector:
                    kubernetes.io/os: linux
                  securityContext:
                    runAsNonRoot: true
                    runAsUser: 65534
                  serviceAccountName: controller
                  terminationGracePeriodSeconds: 0

      - name: Create the metallb memberlist Secret
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: v1
            kind: Secret
            metadata:
              namespace: metallb-system
              name: memberlist
            data:
              secretkey: "{{ kubernetes['metallb']['memberlist'] | b64encode }}"

      - name: Create metallb ConfigMap (L2 bridging)
        community.kubernetes.k8s:
          state: present
          context: "{{ kubernetes.context }}"
          definition:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              namespace: metallb-system
              name: config
            data:
              config: |
                address-pools:
                - name: default
                  protocol: layer2
                  addresses:
                  - {{ kubernetes.metallb.dhcp.start }}-{{ kubernetes.metallb.dhcp.end }}

      delegate_to: localhost
      run_once: yes
