- name: Install zabbix_api
  ansible.builtin.pip:
    state: present
    name: zabbix_api
  become: true

- name: Import Zabbix templates from JSON
  community.zabbix.zabbix_template:
    state: present
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    template_json: "{{ lookup('ansible.builtin.template', item) }}"
  with_fileglob:
    - templates/zabbix/*.j2

- name: Add Slack media type
  community.zabbix.zabbix_mediatype:
    name: Cloudmason Slack
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    type: webhook
    webhook_script: "{{ lookup('ansible.builtin.file', 'files/slack.js') }}"
    webhook_params:
      - name: alert_message
        value: "{ALERT.MESSAGE}"
      - name: alert_subject
        value: "{ALERT.SUBJECT}"
      - name: bot_token
        value: "{{ slack_bot_token }}"
      - name: channel
        value: "#zabbix"
      - name: channel_id
        value: '{EVENT.TAGS.__channel_id}'
      - name: discovery_host_dns
        value: "{DISCOVERY.DEVICE.DNS}"
      - name: discovery_host_ip
        value: "{DISCOVERY.DEVICE.IPADDRESS}"
      - name: event_date
        value: "{EVENT.DATE}"
      - name: event_id
        value: "{EVENT.ID}"
      - name: event_nseverity
        value: "{EVENT.NSEVERITY}"
      - name: event_opdata
        value: "{EVENT.OPDATA}"
      - name: event_recovery_date
        value: "{EVENT.RECOVERY.DATE}"
      - name: event_recovery_time
        value: "{EVENT.RECOVERY.TIME}"
      - name: event_severity
        value: "{EVENT.SEVERITY}"
      - name: event_source
        value: "{EVENT.SOURCE}"
      - name: event_tags
        value: "{EVENT.TAGS}"
      - name: event_time
        value: "{EVENT.TIME}"
      - name: event_update_date
        value: "{EVENT.UPDATE.DATE}"
      - name: event_update_status
        value: "{EVENT.UPDATE.STATUS}"
      - name: event_update_time
        value: "{EVENT.UPDATE.TIME}"
      - name: event_value
        value: "{EVENT.VALUE}"
      - name: host_conn
        value: "{HOST.CONN}"
      - name: host_name
        value: "{HOST.HOST}"
      - name: message_ts
        value: '{EVENT.TAGS.__message_ts}'
      - name: slack_as_user
        value: 'true'
      - name: slack_mode
        value: 'alarm'
      - name: trigger_description
        value: "{TRIGGER.DESCRIPTION}"
      - name: trigger_id
        value: "{TRIGGER.ID}"
      - name: zabbix_url
        value: "{{ slack_zabbix_url }}"
    process_tags: true
    event_menu: true
    event_menu_name: "Open in Slack: '{EVENT.TAGS.__channel_name}'"
    event_menu_url: '{EVENT.TAGS.__message_link}'
    message_templates:
      - subject: 'Problem: {EVENT.NAME}'
        body: |
          Problem started at {EVENT.TIME} on {EVENT.DATE}
          Problem name: {EVENT.NAME}
          Host: {HOST.NAME}
          Severity: {EVENT.SEVERITY}
          Operational data: {EVENT.OPDATA}
          Original problem ID: {EVENT.ID}
          {TRIGGER.URL}
        eventsource: triggers
        recovery: operations
      - subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
        body: |
          Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
          Problem name: {EVENT.NAME}
          Problem duration: {EVENT.DURATION}
          Host: {HOST.NAME}
          Severity: {EVENT.SEVERITY}
          Original problem ID: {EVENT.ID}
          {TRIGGER.URL}
        eventsource: triggers
        recovery: recovery_operations
      - subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
        body: |
          {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
          {EVENT.UPDATE.MESSAGE}

          Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
        eventsource: triggers
        recovery: update_operations
      - subject: 'Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
        body: |
          Discovery rule: {DISCOVERY.RULE.NAME}

          Device IP: {DISCOVERY.DEVICE.IPADDRESS}
          Device DNS: {DISCOVERY.DEVICE.DNS}
          Device status: {DISCOVERY.DEVICE.STATUS}
          Device uptime: {DISCOVERY.DEVICE.UPTIME}

          Device service name: {DISCOVERY.SERVICE.NAME}
          Device service port: {DISCOVERY.SERVICE.PORT}
          Device service status: {DISCOVERY.SERVICE.STATUS}
          Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        eventsource: discovery
        recovery: operations
      - subject: 'Autoregistration: {HOST.HOST}'
        body: |
          Host name: {HOST.HOST}
          Host IP: {HOST.IP}
          Agent port: {HOST.PORT}
        eventsource: autoregistration
        recovery: operations

- name: Create an email mediatype with message templates
  community.zabbix.zabbix_mediatype:
    name: Cloudmason Email
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    type: email
    smtp_email: "{{ smtp_email }}"
    smtp_server: "{{ smtp_server }}"
    message_templates:
      - subject: 'Problem: {EVENT.NAME}'
        body: |
          Problem started at {EVENT.TIME} on {EVENT.DATE}
          Problem name: {EVENT.NAME}
          Host: {HOST.NAME}
          Severity: {EVENT.SEVERITY}
          Operational data: {EVENT.OPDATA}
          Original problem ID: {EVENT.ID}
          {TRIGGER.URL}
        eventsource: triggers
        recovery: operations
      - subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
        body: |
          Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
          Problem name: {EVENT.NAME}
          Problem duration: {EVENT.DURATION}
          Host: {HOST.NAME}
          Severity: {EVENT.SEVERITY}
          Original problem ID: {EVENT.ID}
          {TRIGGER.URL}
        eventsource: triggers
        recovery: recovery_operations
      - subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
        body: |
          {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
          {EVENT.UPDATE.MESSAGE}

          Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
        eventsource: triggers
        recovery: update_operations
      - subject: 'Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
        body: |
          Discovery rule: {DISCOVERY.RULE.NAME}

          Device IP: {DISCOVERY.DEVICE.IPADDRESS}
          Device DNS: {DISCOVERY.DEVICE.DNS}
          Device status: {DISCOVERY.DEVICE.STATUS}
          Device uptime: {DISCOVERY.DEVICE.UPTIME}

          Device service name: {DISCOVERY.SERVICE.NAME}
          Device service port: {DISCOVERY.SERVICE.PORT}
          Device service status: {DISCOVERY.SERVICE.STATUS}
          Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        eventsource: discovery
        recovery: operations
      - subject: 'Autoregistration: {HOST.HOST}'
        body: |
          Host name: {HOST.HOST}
          Host IP: {HOST.IP}
          Agent port: {HOST.PORT}
        eventsource: autoregistration
        recovery: operations

- name: Create mark admin
  community.zabbix.zabbix_user:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    alias: "{{ users.mark.alias }}"
    name: "{{ users.mark.first_name }}"
    surname: "{{ users.mark.last_name }}"
    usrgrps:
      - Zabbix administrators
    passwd: "{{ users.mark.password }}"
    lang: en_US
    timezone: America/Detroit
    theme: dark-theme
    autologin: false
    autologout: '0'
    refresh: '30'
    rows_per_page: '200'
    after_login_url: ''
    type: Zabbix super admin
    role_name: Super admin role
    state: present
    user_medias:
      - mediatype: Cloudmason Email
        sendto: "{{ users.mark.email }}"
        period: 1-7,00:00-24:00
        severity:
          not_classified: false
          information: true
          warning: true
          average: true
          high: true
          disaster: true
        active: true
      - mediatype: Cloudmason Slack
        sendto: "{{ users.mark.slack }}"
        period: 1-7,00:00-24:00
        severity:
          not_classified: false
          information: true
          warning: true
          average: true
          high: true
          disaster: true
        active: true

- name: Create discovery rule with ICMP, agent, and SNMP checks
  community.zabbix.zabbix_discovery_rule:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    name: Cloudmason
    state: present
    iprange: "{{ discovery_iprange }}"
    dchecks:
      - type: ICMP
      - type: Zabbix
        key: "agent.hostname"
        ports: "10050"
        uniq: true
        host_source: "discovery"
      - type: SNMPv2
        snmp_community: public
        ports: "161"
        key: SNMPv2-MIB::sysName.0

# - name: Deploy discovery action
#   community.zabbix.zabbix_action:
#     server_url: "{{ server_url }}"
#     admin_login_user: "{{ admin_login_user }}"
#     admin_login_password: "{{ admin_login_password }}"
#     name: Discovered device
#     event_source: discovery
#     state: present
#     status: enabled
#     esc_period: 0s
#     conditions:
#       - type: discovery_status
#         operator: "="
#         value: up
#       - type: discovered_service_type
#         operator: "="
#         value: ICMP ping
#       - type: uptime_or_downtime_duration
#         operator: ">="
#         value: "3600"
#     operations:
#       - type: add_host
#       - type: enable_host
#       - type: link_to_template
#         templates:
#           - ICMP ping

# - name: Deploy agent auto-registration action
#   community.zabbix.zabbix_action:
#     server_url: "{{ server_url }}"
#     admin_login_user: "{{ admin_login_user }}"
#     admin_login_password: "{{ admin_login_password }}"
#     name: Agent auto-registration
#     event_source: auto_registration
#     state: present
#     status: enabled
#     esc_period: 0s
#     operations:
#       - type: add_host

# - name: Deploy Linux agent action
#   community.zabbix.zabbix_action:
#     server_url: "{{ server_url }}"
#     admin_login_user: "{{ admin_login_user }}"
#     admin_login_password: "{{ admin_login_password }}"
#     name: Linux agent action
#     event_source: auto_registration
#     state: present
#     status: enabled
#     esc_period: 0s
#     conditions:
#       - type: host_metadata
#         operator: like
#         value: Linux
#     operations:
#       - type: link_to_template
#         templates:
#           - Linux by Zabbix agent active
#           - Check DNS
#       - type: enable_host

- name: Create host groups
  community.zabbix.zabbix_group:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_groups: "{{ host_groups }}"

- name: Delete host (Zabbix server)
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: absent
    host_name: Zabbix server

- name: Create linux host
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_name: "{{ item.dns }}"
    visible_name: "{{ item.dns }}"
    description: "{{ item.dns }}"
    host_groups:
      - Linux servers
    link_templates:
      - ICMP Ping
      - Linux by Zabbix agent active
      # - Check DNS
    status: enabled
    interfaces:
      - port: "10050"
        type: agent
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
  loop: "{{ linux_servers }}"

- name: Create nas host
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_name: "{{ item.name }}"
    visible_name: "{{ item.name }}"
    description: "{{ item.dns }}"
    host_groups:
      - NAS devices
    link_templates:
      - ICMP Ping
      - Linux by Zabbix agent active
    status: enabled
    interfaces:
      - port: "10050"
        type: agent
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
  loop: "{{ nas_devices }}"

# - name: Create generic snmp host
#   community.zabbix.zabbix_host:
#     server_url: "{{ server_url }}"
#     admin_login_user: "{{ admin_login_user }}"
#     admin_login_password: "{{ admin_login_password }}"
#     state: present
#     host_name: "{{ item.dns }}"
#     visible_name: "{{ item.dns }}"
#     description: "{{ item.dns }}"
#     host_groups:
#       - SNMP servers
#     link_templates:
#       - ICMP ping
#       - Generic SNMP
#       - Interfaces SNMP
#     status: enabled
#     interfaces:
#       - details:
#           community: public
#           version: 2
#         port: "161"
#         type: snmp
#         dns: "{{ item.dns }}"
#         ip: "{{ item.ip }}"
#         main: 1
#         useip: 1
#   loop: "{{ snmp_servers }}"
#   when:
#     - snmp_servers is defined

- name: Create printer snmp host
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_name: "{{ item.dns }}"
    visible_name: "{{ item.dns }}"
    description: "{{ item.dns }}"
    host_groups:
      - Printers
    link_templates:
      # - ICMP Ping
      - Generic SNMP
    status: enabled
    interfaces:
      - details:
          community: public
          version: 2
        port: "161"
        type: snmp
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
      - type: agent
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
  loop: "{{ printers }}"

- name: Create external host
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_name: "{{ item.dns }}"
    visible_name: "{{ item.dns }}"
    description: "{{ item.dns }}"
    host_groups:
      - External hosts
    link_templates:
      - ICMP Ping
    status: enabled
    interfaces:
      - type: agent
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
  loop: "{{ external_hosts }}"

- name: Create generic ping host
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_name: "{{ item.dns }}"
    visible_name: "{{ item.dns }}"
    description: "{{ item.dns }}"
    host_groups:
      - UniFi devices
    link_templates:
      - ICMP Ping
    status: enabled
    interfaces:
      - type: agent
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
  loop: "{{ unifi_devices }}"

# - name: Create generic snmp host
#   community.zabbix.zabbix_host:
#     server_url: "{{ server_url }}"
#     admin_login_user: "{{ admin_login_user }}"
#     admin_login_password: "{{ admin_login_password }}"
#     state: present
#     host_name: "{{ item.dns }}"
#     visible_name: "{{ item.dns }}"
#     description: "{{ item.dns }}"
#     host_groups:
#       - UniFi devices
#     link_templates:
#       - Generic SNMP
#       - Interfaces SNMP
#     status: enabled
#     interfaces:
#       - details:
#           community: public
#           version: 2
#         port: "161"
#         type: snmp
#         dns: "{{ item.dns }}"
#         ip: "{{ item.ip }}"
#         main: 1
#   loop: "{{ unifi_devices }}"

- name: Deploy trigger action
  community.zabbix.zabbix_action:
    server_url: "{{ server_url }}"
    admin_login_user: "{{ admin_login_user }}"
    admin_login_password: "{{ admin_login_password }}"
    name: "Send alerts to Mark"
    event_source: trigger
    state: present
    status: enabled
    esc_period: 60
    conditions:
      - type: trigger_severity
        operator: ">="
        value: not classified
    operations:
      - type: send_message
        media_type: Cloudmason Slack
        send_to_users:
          - mark
    recovery_operations:
      - type: send_message
        media_type: Cloudmason Slack
        send_to_users:
          - mark

- name: Create dns host
  community.zabbix.zabbix_host:
    server_url: "{{ server_url }}"
    login_user: "{{ admin_login_user }}"
    login_password: "{{ admin_login_password }}"
    state: present
    host_name: "{{ item.dns }}"
    visible_name: "{{ item.dns }}"
    description: "{{ item.dns }}"
    host_groups:
      - DNS servers
    link_templates:
      - ICMP ping
      # - DNS service
      - Linux by Zabbix agent active
    status: enabled
    interfaces:
      - type: agent
        dns: "{{ item.dns }}"
        ip: "{{ item.ip }}"
        main: 1
        useip: 1
  loop: "{{ dns_servers }}"
