---

- name: Disable PasswordAuthentication
  lineinfile:
    state: present
    path: /etc/ssh/sshd_config
    line: PasswordAuthentication no
    backup: yes
  become: yes
  notify: Restart sshd

- name: Install fail2ban
  apt:
    name: fail2ban
    state: present
  become: yes

- name: Start and enable fail2ban
  systemd:
    name: fail2ban
    state: started
    enabled: yes
  become: yes

- name: Create /etc/fail2ban/jail.local
  copy:
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: 0644
    content: |
      [sshd]
      enabled = true
      port = 22
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
    backup: yes
  become: yes
  notify: Restart fail2ban

- name: Install node_exporter
  apt:
    state: present
    name: prometheus-node-exporter
  become: yes

- name: Start and enable node_exporter
  systemd:
    name: prometheus-node-exporter
    state: started
    enabled: yes
  become: yes

- name: Install gnupg
  apt:
    state: present
    name: gnupg
  become: yes

- name: Add PowerDNS apt GPG key
  apt_key:
    state: present
    id: "{{ powerdns_gpg_key_id }}"
    keyserver: keys.gnupg.net
  become: yes

- name: Add PowerDNS recursor repository
  apt_repository:
    state: present
    repo: deb http://repo.powerdns.com/raspbian {{ ansible_distribution_release }}-rec-{{ powerdns_version | replace('.', '') }} main
  when:
    - ansible_architecture == 'armv7l'
    - ansible_distribution_release == 'buster'
  become: yes

- name: Add PowerDNS authoritative server repository
  apt_repository:
    state: present
    repo: deb http://repo.powerdns.com/raspbian {{ ansible_distribution_release }}-auth-{{ powerdns_version | replace('.', '') }} main
  when:
    - ansible_architecture == 'armv7l'
    - ansible_distribution_release == 'buster'
  become: yes

- name: Add PowerDNS recursor repository
  apt_repository:
    state: present
    repo: deb http://repo.powerdns.com/ubuntu {{ ansible_distribution_release }}-rec-{{ powerdns_version | replace('.', '') }} main
  when:
    - ansible_architecture == 'x86_64'
    - ansible_distribution_release == 'bionic'
  become: yes

- name: Add PowerDNS authoritative server repository
  apt_repository:
    state: present
    repo: deb http://repo.powerdns.com/ubuntu {{ ansible_distribution_release }}-auth-{{ powerdns_version | replace('.', '') }} main
  when:
    - ansible_architecture == 'x86_64'
    - ansible_distribution_release == 'bionic'
  become: yes

- name: Add pin-priority for PowerDNS packages
  copy:
    dest: /etc/apt/preferences.d/pdns
    owner: root
    group: root
    mode: 0644
    content: |
      Package: pdns-*
      Pin: origin repo.powerdns.com
      Pin-Priority: 600
  become: yes

- name: Disable avahi-daemon
  systemd:
    state: stopped
    enabled: no
    name: avahi-daemon
  ignore_errors: yes # Might not exist
  become: yes

- name: Disable systemd-resolved
  systemd:
    state: stopped
    enabled: no
    name: systemd-resolved
  become: yes

- name: Deploy /etc/resolv.conf
  copy:
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
    content: |
      search cloudmason.org
      nameserver 192.168.1.1
  become: yes

- name: Install pdns-server, pdns-backend-mysql, pdns-recursor, default-mysql-server
  apt:
    state: present
    name:
      - pdns-server
      - pdns-backend-mysql
      - pdns-recursor
      - default-mysql-server
  become: yes

- name: Deploy /etc/powerdns/recursor.conf
  copy:
    dest: /etc/powerdns/recursor.conf
    owner: pdns
    group: root
    mode: 0640
    content: |
      api-key={{ powerdns_api_key }}
      webserver=yes
      webserver-address=0.0.0.0
      webserver-port=8082
      webserver-allow-from=0.0.0.0/0
      webserver-password={{ powerdns_web_password }}
      local-address=0.0.0.0:55
      serve-rfc1918=no
      forward-zones=cloudmason.org=127.0.0.1:5353,1.168.192.in-addr.arpa=127.0.0.1:5353
      # forward-zones+=another.example.com=127.0.0.1:5300
  notify: Restart pdns-recursor
  become: yes

- name: Start and enable pdns-recursor
  systemd:
    name: pdns-recursor
    state: started
    enabled: yes
  become: yes

- name: Install python3-pymysql
  apt:
    state: present
    name: python3-pymysql
  become: yes

- name: Create PowerDNS database
  community.mysql.mysql_db:
    state: present
    name: pdns
    check_implicit_admin: yes
    login_unix_socket: /var/run/mysqld/mysqld.sock
  become: yes

- name: Create PowerDNS user
  community.mysql.mysql_user:
    state: present
    name: pdns
    password: "{{ powerdns_mysql_password }}"
    priv: 'pdns.*:ALL'
    check_implicit_admin: yes
    login_unix_socket: /var/run/mysqld/mysqld.sock
  become: yes

- name: Create PowerDNS schema
  community.mysql.mysql_query:
    login_db: pdns
    login_unix_socket: /var/run/mysqld/mysqld.sock
    query:
      - CREATE TABLE IF NOT EXISTS domains (
          id                    INT AUTO_INCREMENT,
          name                  VARCHAR(255) NOT NULL,
          master                VARCHAR(128) DEFAULT NULL,
          last_check            INT DEFAULT NULL,
          type                  VARCHAR(6) NOT NULL,
          notified_serial       INT DEFAULT NULL,
          account               VARCHAR(40) CHARACTER SET 'utf8' DEFAULT NULL,
          PRIMARY KEY (id)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - ALTER TABLE domains ADD INDEX (name);
      - CREATE TABLE IF NOT EXISTS records (
          id                    BIGINT AUTO_INCREMENT,
          domain_id             INT DEFAULT NULL,
          name                  VARCHAR(255) DEFAULT NULL,
          type                  VARCHAR(10) DEFAULT NULL,
          content               VARCHAR(64000) DEFAULT NULL,
          ttl                   INT DEFAULT NULL,
          prio                  INT DEFAULT NULL,
          change_date           INT DEFAULT NULL,
          disabled              TINYINT(1) DEFAULT 0,
          ordername             VARCHAR(255) BINARY DEFAULT NULL,
          auth                  TINYINT(1) DEFAULT 1,
          PRIMARY KEY (id)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - ALTER TABLE records ADD INDEX (name, type);
      - ALTER TABLE records ADD INDEX (domain_id);
      - ALTER TABLE records ADD INDEX (ordername);
      - CREATE TABLE IF NOT EXISTS supermasters (
          ip                    VARCHAR(64) NOT NULL,
          nameserver            VARCHAR(255) NOT NULL,
          account               VARCHAR(40) CHARACTER SET 'utf8' NOT NULL,
          PRIMARY KEY (ip, nameserver)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - CREATE TABLE IF NOT EXISTS comments (
          id                    INT AUTO_INCREMENT,
          domain_id             INT NOT NULL,
          name                  VARCHAR(255) NOT NULL,
          type                  VARCHAR(10) NOT NULL,
          modified_at           INT NOT NULL,
          account               VARCHAR(40) CHARACTER SET 'utf8' DEFAULT NULL,
          comment               TEXT CHARACTER SET 'utf8' NOT NULL,
          PRIMARY KEY (id)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - ALTER TABLE comments ADD INDEX (name, type);
      - ALTER TABLE comments ADD INDEX (domain_id, modified_at);
      - CREATE TABLE IF NOT EXISTS domainmetadata (
          id                    INT AUTO_INCREMENT,
          domain_id             INT NOT NULL,
          kind                  VARCHAR(32),
          content               TEXT,
          PRIMARY KEY (id)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - ALTER TABLE domainmetadata ADD INDEX (domain_id, kind);
      - CREATE TABLE IF NOT EXISTS cryptokeys (
          id                    INT AUTO_INCREMENT,
          domain_id             INT NOT NULL,
          flags                 INT NOT NULL,
          active                BOOL,
          content               TEXT,
          PRIMARY KEY(id)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - ALTER TABLE cryptokeys ADD INDEX (domain_id);
      - CREATE TABLE IF NOT EXISTS tsigkeys (
          id                    INT AUTO_INCREMENT,
          name                  VARCHAR(255),
          algorithm             VARCHAR(50),
          secret                VARCHAR(255),
          PRIMARY KEY (id)
        ) Engine=InnoDB CHARACTER SET 'latin1';
      - ALTER TABLE tsigkeys ADD UNIQUE INDEX (name, algorithm);
  become: yes

- name: Deploy /etc/powerdns/pdns.conf
  copy:
    dest: /etc/powerdns/pdns.conf
    owner: pdns
    group: root
    mode: 0640
    content: |
      local-address=0.0.0.0:5353
      api=yes
      api-key={{ powerdns_api_key }}
      webserver=yes
      webserver-address=0.0.0.0
      webserver-allow-from=0.0.0.0/0
      webserver-password={{ powerdns_web_password }}
      launch=gmysql
      gmysql-socket=/var/run/mysqld/mysqld.sock
      gmysql-dbname=pdns
      gmysql-user=pdns
      gmysql-password={{ powerdns_mysql_password }}
  notify: Restart pdns
  become: yes

- name: Start and enable pdns
  systemd:
    name: pdns
    state: started
    enabled: yes
  become: yes

- name: Deploy /etc/resolv.conf
  copy:
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
    content: |
      search cloudmason.org
      nameserver 127.0.0.1
  become: yes

- name: Create the traefik group
  group:
    name: traefik
  become: yes

- name: Create the traefik user
  user:
    name: traefik
    group: traefik
    create_home: yes
    shell: /bin/bash
  become: yes

- name: Pull down the traefik binary tarball
  get_url:
    url: https://github.com/traefik/traefik/releases/download/v2.3.5/traefik_v2.3.5_linux_armv7.tar.gz
    checksum: sha256:853af73c985b32bcc17f7292b111ced0e93882362f819f1e3a65ef22f4fd5f51
    dest: /home/traefik/traefik_v2.3.5_linux_armv7.tar.gz
    owner: traefik
    group: traefik
    mode: 0644
  when:
    - ansible_architecture == 'armv7l'
  become: yes

- name: Pull down the traefik binary tarball
  get_url:
    url: https://github.com/traefik/traefik/releases/download/v2.3.6/traefik_v2.3.6_linux_amd64.tar.gz
    checksum: sha256:f9067f9c82d1d7aa0b5234265c3cb197f08c7823e49da02ad68be6df2d090534
    dest: /home/traefik/traefik_v2.3.6_linux_amd64.tar.gz
    owner: traefik
    group: traefik
    mode: 0644
  when:
    - ansible_architecture == 'x86_64'
  become: yes

- name: Extract the traefik tarball
  unarchive:
    src: /home/traefik/traefik_v2.3.5_linux_armv7.tar.gz
    dest: /home/traefik
    remote_src: yes
    owner: traefik
    group: traefik
    creates: /home/traefik/traefik
  when:
    - ansible_architecture == 'armv7l'
  become: yes

- name: Extract the traefik tarball
  unarchive:
    src: /home/traefik/traefik_v2.3.6_linux_amd64.tar.gz
    dest: /home/traefik
    remote_src: yes
    owner: traefik
    group: traefik
    creates: /home/traefik/traefik
  when:
    - ansible_architecture == 'x86_64'
  become: yes

- name: Deploy traefik.toml
  copy:
    dest: /home/traefik/traefik.toml
    owner: traefik
    group: traefik
    mode: 0644
    content: |
      defaultEntryPoints = ["http", "https"]

      [entryPoints]
        [entryPoints.http]
          address = ":80"
          [entryPoints.http.http.redirections]
            [entryPoints.http.http.redirections.entryPoint]
              to = "https"
              scheme = "https"
        [entryPoints.https]
          address = ":443"

      [providers]
        [providers.file]
          filename = "/home/traefik/traefik_dynamic.toml"

      [certificatesResolvers.myresolver.acme]
        email = "{{ traefik.cloudflare.api_email }}"
        storage = "/home/traefik/acme.json"
        # caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
        caServer = "https://acme-v02.api.letsencrypt.org/directory"
        [certificatesResolvers.myresolver.acme.dnsChallenge]
          provider = "cloudflare"
          delayBeforeCheck = 0
          resolvers = ["1.1.1.1:53", "8.8.8.8:53"]

      [log]
        filePath = "/home/traefik/traefik.log"
        level = "WARN"
  notify: Restart traefik
  become: yes

- name: Deploy traefik_dynamic.toml
  copy:
    dest: /home/traefik/traefik_dynamic.toml
    owner: traefik
    group: traefik
    mode: 0644
    content: |
      [http]
        [http.routers]
          [http.routers.apex]
            rule = "Host(`cloudmason.org`)"
            service = "apex"
            [http.routers.apex.tls]
              certResolver = "myresolver"
              [[http.routers.apex.tls.domains]]
                main = "cloudmason.org"
                sans = ["*.cloudmason.org"]
          [http.routers.awx]
            rule = "Host(`awx.cloudmason.org`)"
            service = "awx"
            [http.routers.awx.tls]
          [http.routers.awx-dev]
            rule = "Host(`awx-dev.cloudmason.org`)"
            service = "awx-dev"
            [http.routers.awx-dev.tls]
          [http.routers.grafana]
            rule = "Host(`grafana.cloudmason.org`)"
            service = "grafana"
            [http.routers.grafana.tls]
          [http.routers.prometheus]
            rule = "Host(`prometheus.cloudmason.org`)"
            service = "prometheus"
            [http.routers.prometheus.tls]
          [http.routers.web]
            rule = "Host(`web.cloudmason.org`)"
            service = "web"
            [http.routers.web.tls]
          [http.routers.www]
            rule = "Host(`www.cloudmason.org`)"
            service = "www"
            [http.routers.www.tls]
          [http.routers.unifi]
            rule = "Host(`unifi.cloudmason.org`)"
            service = "unifi"
            [http.routers.unifi.tls]
          [http.routers.nzbget]
            rule = "Host(`nzbget.cloudmason.org`)"
            # middlewares = ["admin-user"]
            service = "nzbget"
            [http.routers.nzbget.tls]
          [http.routers.sonarr]
            rule = "Host(`sonarr.cloudmason.org`)"
            # middlewares = ["admin-user"]
            service = "sonarr"
            [http.routers.sonarr.tls]
          [http.routers.radarr]
            rule = "Host(`radarr.cloudmason.org`)"
            # middlewares = ["admin-user"]
            service = "radarr"
            [http.routers.radarr.tls]

        [http.middlewares]
          [http.middlewares.admin-user.basicAuth]
            users = ["admin:{{ traefik.admin.password }}"]

        [http.services]
          [http.services.apex.loadBalancer]
            [[http.services.apex.loadBalancer.servers]]
              url = "http://cloudmason.org:8000/"
          [http.services.awx.loadBalancer]
            [[http.services.awx.loadBalancer.servers]]
              url = "http://awx-web-svc.jonagold.cloudmason.org:80/"
          [http.services.awx-dev.loadBalancer]
            [[http.services.awx-dev.loadBalancer.servers]]
              url = "http://awx-service.sunfire.cloudmason.org:80/"
          [http.services.grafana.loadBalancer]
            [[http.services.grafana.loadBalancer.servers]]
              url = "http://grafana.jonagold.cloudmason.org:3000/"
          [http.services.prometheus.loadBalancer]
            [[http.services.prometheus.loadBalancer.servers]]
              url = "http://prometheus.jonagold.cloudmason.org:9090/"
          [http.services.web.loadBalancer]
            [[http.services.web.loadBalancer.servers]]
              url = "http://web.cloudmason.org:8000/"
          [http.services.www.loadBalancer]
            [[http.services.www.loadBalancer.servers]]
              url = "http://web.cloudmason.org:8000/"
          [http.services.unifi.loadBalancer]
            [[http.services.unifi.loadBalancer.servers]]
              url = "https://cloudkey2.cloudmason.org:8443/"
          [http.services.nzbget.loadBalancer]
            [[http.services.nzbget.loadBalancer.servers]]
              url = "http://qnap.cloudmason.org:11000/"
          [http.services.sonarr.loadBalancer]
            [[http.services.sonarr.loadBalancer.servers]]
              url = "http://qnap.cloudmason.org:11001/"
          [http.services.radarr.loadBalancer]
            [[http.services.radarr.loadBalancer.servers]]
              url = "http://qnap.cloudmason.org:11002/"

      [tls.options]
        [tls.options.default]
          minVersion = "VersionTLS12"
        [tls.options.mintls13]
          minVersion = "VersionTLS13"
  notify: Restart traefik
  become: yes

- name: Give net priv ports to the traefik binary
  community.general.capabilities:
    path: /home/traefik/traefik
    capability: cap_net_bind_service=+ep
    state: present
  become: yes

- name: Deploy the traefik systemd unit file
  copy:
    dest: /etc/systemd/system/traefik.service
    owner: root
    group: root
    mode: 0644
    content: |
      [Unit]
      Description=Traefik
      Documentation=https://doc.traefik.io/traefik/

      [Service]
      User=traefik
      AmbientCapabilities=CAP_NET_BIND_SERVICE
      Type=notify
      Environment=CF_DNS_API_TOKEN={{ traefik.cloudflare.api_key }}
      ExecStart=/home/traefik/traefik --configFile=/home/traefik/traefik.toml
      Restart=always
      WatchdogSec=1s

      [Install]
      WantedBy=multi-user.target
  become: yes

- name: Start and enable traefik
  systemd:
    name: traefik
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes
